% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/findVariableFeaturesBayes.R
\name{findVariableFeaturesBayes}
\alias{findVariableFeaturesBayes}
\title{Identify highly variable genes in a Bayesian manner.}
\usage{
findVariableFeaturesBayes(
  sc.obj = NULL,
  subject.id = NULL,
  n.cells.subsample = 500L,
  iter.per.chain = 1000L,
  warmup.per.chain = 250L,
  n.chains = 1L,
  thin.rate = 5L,
  n.cores.chain = 1L,
  n.cores.per.chain = 4L,
  model.priors = NULL,
  algorithm = "meanfield",
  opencl.params = NULL,
  random.seed = 312,
  verbose = TRUE,
  save.model = FALSE
)
}
\arguments{
\item{sc.obj}{An object of class \code{Seurat} or \code{SingleCellExperiment}. Defaults to NULL.}

\item{subject.id}{A string specifying the metadata column in \code{sc.obj} that contains subject IDs. Defaults to NULL.}

\item{n.cells.subsample}{An integer specifying the number of cells per-gene (and per-subject if \code{subject.id} is not NULL) to subsample to when performing estimation. Defaults to 500.}

\item{iter.per.chain}{An integer specifying the number of iterations per chain. Defaults to 3000.}

\item{warmup.per.chain}{An integer specifying the number of warmup (burn-in) iterations per chain. Defaults to 250.}

\item{n.chains}{An integer specifying the number of chains used when fitting the model via sampling instead of VI or the Laplace approximation. Defaults to 1.}

\item{n.cores.chain}{An integer specifying the number of cores to be used when fitting the Bayesian hierarchical model. Defaults to 1.}

\item{n.cores.per.chain}{An integer specifying the number of cores to be used within each chain when fitting the Bayesian hierarchical model. Defaults to 4.}

\item{model.priors}{A vector containing priors to be used in model fitting. If left NULL, intelligent priors will be set internally. See \code{\link[brms]{set_prior}} for details. Defaults to NULL.}

\item{algorithm}{A string specifying the variational inference or sampling algorithm to be used. Must be one of "meanfield", "fullrank", "laplace", "pathfinder" (all approximate methods) or "sampling" for MCMC via NUTS. Note that MCMC will be slower than using a VI algorithm or the Laplace approximation. Defaults to "meanfield".}

\item{opencl.params}{A two-element double vector specifying the platform and device IDs of the OpenCL GPU device. Most users should specify \code{c(0, 0)}. See \code{\link[brms]{opencl}} for more details. Defaults to NULL.}

\item{random.seed}{A double specifying the random seed to be used when fitting and sampling from the model. Defaults to 312.}

\item{verbose}{A Boolean specifying whether or not verbose model output should be printed to the console. Defaults to TRUE.}

\item{save.model}{A Boolean specifying whether or not the fitted model generated by \code{\link[brms]{brm}} should be saved to the unstructured metadata of \code{sc.obj}. Defaults to FALSE.}
}
\value{
Depending on the input, either an object of class \code{Seurat} or \code{SingleCellExperiment} with gene-level statistics added to the appropriate metadata slot.
}
\description{
This function implements HVG estimation using Bayesian variational inference to approximate the posterior distribution of the mean and overdispersion of each gene.
}
\details{
\itemize{
\item Throughout the package, we make an important distinction between overdispersion (the parameter \eqn{\theta} of the Negative-binomial distribution) and dispersion, which is estimated as \eqn{d = \frac{\sigma^2}{\mu}}.
\item Our method makes use of \code{cmdstanr} to fit the model rather than \code{rstan}, as the former is generally much faster. For details, see \code{\link[cmdstanr]{cmdstan_model}}. This of course necessitates first running \code{\link[cmdstanr]{install_cmdstan}} if you haven't already. If errors occur, make sure to check that your toolchain is set up correctly by running \code{\link[cmdstanr]{check_cmdstan_toolchain}}.
\item When using sampling instead of an approximation method, increasing \code{n.chains} will increase the model's performance at the cost of extra computational resource usage. If possible, set \code{n.cores} equal to \code{n.chains} for optimal processing speed.
\item While we have implemented GPU acceleration via OpenCL through the argument \code{opencl.params}, OpenCL acceleration is not supported on every machine. For example, Apple M-series chips do not support double-precision floating-points, which are necessary for Stan to compile. For more information, see \href{https://discourse.mc-stan.org/t/gpus-on-mac-osx-apple-m1/23375/5}{this Stan forums thread}. In order to correctly specify the OpenCL platform and device IDs, use the \code{clinfo} command line utility.
\item The user can specify which variational inference (VI) or sampling algorithm to use to fit the model via the argument \code{algorithm}. For further details, see \href{https://www.jmlr.org/papers/volume18/16-107/16-107.pdf}{this paper} comparing the meanfield and fullrank algorithms, and \href{https://doi.org/10.48550/arXiv.2108.03782}{this preprint} that introduced the Pathfinder algorithm. For a primer on automatic differentiation variational inference (ADVI), see \href{https://doi.org/10.48550/arXiv.1506.03431}{this preprint}. Lastly, \href{https://discourse.mc-stan.org/t/issues-with-differences-between-mcmc-and-pathfinder-results-how-to-make-pathfinder-or-something-else-more-accurate/35992}{this Stan forums thread} lays out some pratical differences between the algorithms.
\item If \code{save.model} is set to TRUE, the final model fit will be saved to the appropriate unstructured metadata slot of \code{sc.obj}. This allows the user to inspect the final fit and perform posterior predictive checks, but the model object takes up a lot of space. As such, it is recommended to remove it from \code{sc.obj} by setting the appropriate slot to NULL before saving it to disk.
}
}
\examples{
data(seu_pbmc)
seu_pbmc <- findVariableFeaturesBayes(seu_pbmc, 
                                      n.cells.subsample = 1000L, 
                                      algorithm = "meanfield", 
                                      n.cores.per.chain = 1L, 
                                      save.model = TRUE)
}
\seealso{
\code{\link[Seurat]{FindVariableFeatures}}

\code{\link[scran]{modelGeneVar}}

\code{\link[brms]{brm}}
}
\author{
Jack R. Leary
}
